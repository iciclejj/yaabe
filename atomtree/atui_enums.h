/*
Enums for ATUI_ENUM
See ppatui.h for PPATUI_ENUMER() definition
See atui_atomfirmware.c for purpose
*/

/*
def enum_to_atui(s):
	import re
	s = re.sub("\n    ","\n\t", s)
	s = re.sub("enum\s+([a-zA-Z0-9_]+).*{", "PPATUI_ENUMER(\g<1>,", s)
	s = re.sub("\t([a-zA-Z0-9_]+).*\n","\t\g<1>,\n",s)
	s = re.sub(",\n};","\n)",s)
	print(s)

enum_to_atui(s)


*/
#ifndef ATUI_ENUMS_H
#define ATUI_ENUMS_H

/******************************************************************************/
// atomfirmware.h

PPATUI_ENUMER(I2cControllerPort_e,
	I2C_CONTROLLER_PORT_0,
	I2C_CONTROLLER_PORT_1
)
PPATUI_ENUMER(I2cControllerName_e,
	I2C_CONTROLLER_NAME_VR_GFX,
	I2C_CONTROLLER_NAME_VR_SOC,
	I2C_CONTROLLER_NAME_VR_VDDCI,
	I2C_CONTROLLER_NAME_VR_MVDD,
	I2C_CONTROLLER_NAME_LIQUID_0,
	I2C_CONTROLLER_NAME_LIQUID_1,
	I2C_CONTROLLER_NAME_PLX,
	I2C_CONTROLLER_NAME_FAN_INTAKE,
	I2C_CONTROLLER_NAME_SPARE,

	I2C_CONTROLLER_NAME_COUNT,
	I2C_CONTROLLER_NAME_COUNT_SMU11_PPT3,
	I2C_CONTROLLER_NAME_COUNT_SMU11_PPT8,
	I2C_CONTROLLER_NAME_COUNT_SMU13
)
PPATUI_ENUMER(I2cControllerThrottler_e,
	I2C_CONTROLLER_THROTTLER_TYPE_NONE,
	I2C_CONTROLLER_THROTTLER_VR_GFX,
	I2C_CONTROLLER_THROTTLER_VR_SOC,
	I2C_CONTROLLER_THROTTLER_VR_VDDCI,
	I2C_CONTROLLER_THROTTLER_VR_MVDD,
	I2C_CONTROLLER_THROTTLER_LIQUID_0,
	I2C_CONTROLLER_THROTTLER_LIQUID_1,
	I2C_CONTROLLER_THROTTLER_PLX,
	I2C_CONTROLLER_THROTTLER_FAN_INTAKE,
	I2C_CONTROLLER_THROTTLER_INA3221
)
PPATUI_ENUMER(I2cControllerProtocol_e,
	I2C_CONTROLLER_PROTOCOL_VR_XPDE132G5,
	I2C_CONTROLLER_PROTOCOL_VR_IR35217,
	I2C_CONTROLLER_PROTOCOL_TMP_TMP102A,
	I2C_CONTROLLER_PROTOCOL_TMP_MAX31875,
	I2C_CONTROLLER_PROTOCOL_INA3221,
	I2C_CONTROLLER_PROTOCOL_TMP_MAX6604,

	I2C_CONTROLLER_PROTOCOL_SPARE_0,
	I2C_CONTROLLER_PROTOCOL_SPARE_1,
	I2C_CONTROLLER_PROTOCOL_SPARE_2
)
PPATUI_ENUMER(I2cControllerSpeed_e,
	I2C_SPEED_FAST_50K,
	I2C_SPEED_FAST_100K,
	I2C_SPEED_FAST_400K,
	I2C_SPEED_FAST_PLUS_1M,
	I2C_SPEED_HIGH_1M,
	I2C_SPEED_HIGH_2M,

	I2C_CONTROLLER_SPEED_SLOW,
	I2C_CONTROLLER_SPEED_FAST
)


PPATUI_ENUMER(atom_lcd_info_panel_misc,
	ATOM_PANEL_MISC_FPDI
)
PPATUI_ENUMER(atom_lcd_info_dptolvds_rx_id,
	eDP_TO_LVDS_RX_DISABLE,
	eDP_TO_LVDS_COMMON_ID,
	eDP_TO_LVDS_REALTEK_ID
)


PPATUI_ENUMER(atom_spread_spectrum_mode,
	ATOM_SS_CENTER_OR_DOWN_MODE_MASK,
	ATOM_SS_DOWN_SPREAD_MODE,
	ATOM_SS_CENTRE_SPREAD_MODE,
	ATOM_INT_OR_EXT_SS_MASK,
	ATOM_INTERNAL_SS_MASK,
	ATOM_EXTERNAL_SS_MASK
)


PPATUI_ENUMER(atom_dgpu_vram_type,
	ATOM_DGPU_VRAM_TYPE_GDDR5,
	ATOM_DGPU_VRAM_TYPE_HBM2,
	ATOM_DGPU_VRAM_TYPE_HBM2E,
	ATOM_DGPU_VRAM_TYPE_GDDR6,
	ATOM_DGPU_VRAM_TYPE_HBM3
)


PPATUI_ENUMER(atom_voltage_type,
	VOLTAGE_TYPE_VDDC,
	VOLTAGE_TYPE_MVDDC,
	VOLTAGE_TYPE_MVDDQ,
	VOLTAGE_TYPE_VDDCI,
	VOLTAGE_TYPE_VDDGFX,
	VOLTAGE_TYPE_PCC,
	VOLTAGE_TYPE_MVPP,
	VOLTAGE_TYPE_LEDDPM,
	VOLTAGE_TYPE_PCC_MVDD,
	VOLTAGE_TYPE_PCIE_VDDC,
	VOLTAGE_TYPE_PCIE_VDDR,
	VOLTAGE_TYPE_GENERIC_I2C_1,
	VOLTAGE_TYPE_GENERIC_I2C_2,
	VOLTAGE_TYPE_GENERIC_I2C_3,
	VOLTAGE_TYPE_GENERIC_I2C_4,
	VOLTAGE_TYPE_GENERIC_I2C_5,
	VOLTAGE_TYPE_GENERIC_I2C_6,
	VOLTAGE_TYPE_GENERIC_I2C_7,
	VOLTAGE_TYPE_GENERIC_I2C_8,
	VOLTAGE_TYPE_GENERIC_I2C_9,
	VOLTAGE_TYPE_GENERIC_I2C_10
)
PPATUI_ENUMER(atom_voltage_object_mode,
	VOLTAGE_OBJ_GPIO_LUT,
	VOLTAGE_OBJ_VR_I2C_INIT_SEQ,
	VOLTAGE_OBJ_PHASE_LUT,
	VOLTAGE_OBJ_SVID2,
	VOLTAGE_OBJ_EVV,
	VOLTAGE_OBJ_MERGED_POWER
)


/******************************************************************************/
// powerplay.h

PPATUI_ENUMER(PPT_THROTTLER_e,
	PPT_THROTTLER_PPT0,
	PPT_THROTTLER_PPT1,
	PPT_THROTTLER_PPT2,
	PPT_THROTTLER_PPT3,
	PPT_THROTTLER_COUNT
)


/******************************************************************************/
// smu11_driver_if.h / smu_v11_0_pptable.h

PPATUI_ENUMER(SMU11_PPT3_PPCLK,
	SMU11_PPT3_PPCLK_GFXCLK,
	SMU11_PPT3_PPCLK_VCLK,
	SMU11_PPT3_PPCLK_DCLK,
	SMU11_PPT3_PPCLK_ECLK,
	SMU11_PPT3_PPCLK_SOCCLK,
	SMU11_PPT3_PPCLK_UCLK,
	SMU11_PPT3_PPCLK_DCEFCLK,
	SMU11_PPT3_PPCLK_DISPCLK,
	SMU11_PPT3_PPCLK_PIXCLK,
	SMU11_PPT3_PPCLK_PHYCLK,
	SMU11_PPT3_PPCLK_FCLK,
	SMU11_PPT3_PPCLK_COUNT
)
PPATUI_ENUMER(SMU11_PPT8_PPCLK,
	SMU11_PPT8_PPCLK_GFXCLK,
	SMU11_PPT8_PPCLK_SOCCLK,
	SMU11_PPT8_PPCLK_UCLK,
	SMU11_PPT8_PPCLK_DCLK,
	SMU11_PPT8_PPCLK_VCLK,
	SMU11_PPT8_PPCLK_DCEFCLK,
	SMU11_PPT8_PPCLK_DISPCLK,
	SMU11_PPT8_PPCLK_PIXCLK,
	SMU11_PPT8_PPCLK_PHYCLK,
	SMU11_PPT8_PPCLK_COUNT
)

PPATUI_ENUMER(AVFS_VOLTAGE_TYPE_e,
	AVFS_VOLTAGE_GFX,
	AVFS_VOLTAGE_SOC,
	AVFS_VOLTAGE_COUNT
)

PPATUI_ENUMER(SMU_11_0_ODFEATURE_CAP,
	SMU_11_0_ODCAP_GFXCLK_LIMITS,
	SMU_11_0_ODCAP_GFXCLK_CURVE,
	SMU_11_0_ODCAP_UCLK_MAX,
	SMU_11_0_ODCAP_POWER_LIMIT,
	SMU_11_0_ODCAP_FAN_ACOUSTIC_LIMIT,
	SMU_11_0_ODCAP_FAN_SPEED_MIN,
	SMU_11_0_ODCAP_TEMPERATURE_FAN,
	SMU_11_0_ODCAP_TEMPERATURE_SYSTEM,
	SMU_11_0_ODCAP_MEMORY_TIMING_TUNE,
	SMU_11_0_ODCAP_FAN_ZERO_RPM_CONTROL,
	SMU_11_0_ODCAP_AUTO_UV_ENGINE,
	SMU_11_0_ODCAP_AUTO_OC_ENGINE,
	SMU_11_0_ODCAP_AUTO_OC_MEMORY,
	SMU_11_0_ODCAP_FAN_CURVE,
	SMU_11_0_ODCAP_COUNT
)
PPATUI_ENUMER(SMU_11_0_ODSETTING_ID, // index into array
	SMU_11_0_ODSETTING_GFXCLKFMAX,
	SMU_11_0_ODSETTING_GFXCLKFMIN,
	SMU_11_0_ODSETTING_VDDGFXCURVEFREQ_P1,
	SMU_11_0_ODSETTING_VDDGFXCURVEVOLTAGE_P1,
	SMU_11_0_ODSETTING_VDDGFXCURVEFREQ_P2,
	SMU_11_0_ODSETTING_VDDGFXCURVEVOLTAGE_P2,
	SMU_11_0_ODSETTING_VDDGFXCURVEFREQ_P3,
	SMU_11_0_ODSETTING_VDDGFXCURVEVOLTAGE_P3,
	SMU_11_0_ODSETTING_UCLKFMAX,
	SMU_11_0_ODSETTING_POWERPERCENTAGE,
	SMU_11_0_ODSETTING_FANRPMMIN,
	SMU_11_0_ODSETTING_FANRPMACOUSTICLIMIT,
	SMU_11_0_ODSETTING_FANTARGETTEMPERATURE,
	SMU_11_0_ODSETTING_OPERATINGTEMPMAX,
	SMU_11_0_ODSETTING_ACTIMING,
	SMU_11_0_ODSETTING_FAN_ZERO_RPM_CONTROL,
	SMU_11_0_ODSETTING_AUTOUVENGINE,
	SMU_11_0_ODSETTING_AUTOOCENGINE,
	SMU_11_0_ODSETTING_AUTOOCMEMORY,
	SMU_11_0_ODSETTING_COUNT
)
PPATUI_ENUMER(SMU_11_0_PPCLOCK_ID,
	SMU_11_0_PPCLOCK_GFXCLK,
	SMU_11_0_PPCLOCK_VCLK,
	SMU_11_0_PPCLOCK_DCLK,
	SMU_11_0_PPCLOCK_ECLK,
	SMU_11_0_PPCLOCK_SOCCLK,
	SMU_11_0_PPCLOCK_UCLK,
	SMU_11_0_PPCLOCK_DCEFCLK,
	SMU_11_0_PPCLOCK_DISPCLK,
	SMU_11_0_PPCLOCK_PIXCLK,
	SMU_11_0_PPCLOCK_PHYCLK,
	SMU_11_0_PPCLOCK_COUNT
)

/******************************************************************************/

#endif
