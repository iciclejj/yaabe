#!/usr/bin/env python
# -*- coding: utf-8 -*-

# a preprocessor that consumes json5 files to produce c source files for
# atomtree atui.
# ppatui.py input.json5 output.c

import sys
import copy
import json5
import pathlib
import argparse

def description_to_text(description:dict, indent:str):
	# description segment meant for a segment of a c file
	if (description is None):
		return ""
	lang_type = ""
	languages = ("english",)
	descriptions = [None,]
	descr_index = 0
	for trans in description:
		descr_index = languages.index(trans["language"])
		descriptions[descr_index] = trans["text"]

	child_indent = indent + "\t"
	descr_template = (
indent + ".description = {\n"
+ "%s"
+ indent + "},\n"
	)

	des_entry_template = child_indent + "u8\"%s\",\n"
	des_null_entry_template = child_indent + "NULL,\n"

	descr_texts = ""
	for d in descriptions:
		if d:
			descr_texts += des_entry_template % d.replace("\"","\\\"")
		else:
			descr_texts += des_null_entry_template
	return descr_template % descr_texts


def enum_to_h(atui_data:dict, fname:str):
	assert(atui_data["class"] == "enum")
	header_header = """\
/* autogenerated with ppatui.py. Do not edit */

#ifndef %s_H
#define %s_H

"""
	header_end = "\n#endif\n"
	enum_template = """
static_assert(%u <= 255); // uint8_t limits
static const struct atui_enum ATUI_ENUM(%s) = {
	.name = u8"%s",
	.num_entries = %u,
%s\
	.enum_array = (const struct atui_enum_entry[]) {
%s\
	},
};
"""
	enum_entry_template = """\
		{
			.name = u8\"%s\",
			.val = %s,
%s\
		},
"""

	out_text = header_header % (fname.upper(), fname.upper())
	enum_entries = ""
	entry_name = ""
	descr_text = ""
	for enum in atui_data["enums"]:
		enum_entries = ""
		for entry in enum["constants"]:
			entry_name = entry["name"]
			# TODO implement C-side
			#if "description" in entry:
			#	descr_text = description_to_text(entry["description"], "\t\t\t")
			#else:
			#	descr_text = ""
			enum_entries += enum_entry_template % (
				entry_name, entry_name, descr_text
			)
		#if "description" in enum:
		#	descr_text = description_to_text(entry["description"], "\t")
		#else:
		#	descr_text = ""
		out_text += enum_template % (
			len(enum["constants"]), # assert
			enum["name"], enum["name"], len(enum["constants"]),
			descr_text, enum_entries
		)
	return out_text + header_end



class atui_leaf:
	default_type:str  # for defaults; meta
	access:str # var
	access_meta:str # for c preprocessor stuff
	name:str
	display:str
	fancy:str
	fancy_data:None #dict, str, list
	description:dict
	lo:str # bitfield children
	hi:str

	def copy(self):
		return copy.copy(self)

	def __init__(self, leaf:dict):
		leafkeys = set(leaf)

		if "default_type" in leafkeys:
			self.default_type = leaf["default_type"]
		else:
			self.default_type = None
		if "access" in leafkeys:
			self.access = leaf["access"]
			self.access_meta = leaf["access"]
		else:
			self.access = None
			self.access_meta = None
		if "name" in leafkeys:
			self.name = leaf["name"]
		else:
			self.name = None
		if "display" in leafkeys:
			self.display = leaf["display"]
		else:
			self.display = None
		if "fancy" in leafkeys:
			self.fancy = leaf["fancy"]
		else:
			self.fancy = None
		if "fancy_data" in leafkeys:
			self.fancy_data = leaf["fancy_data"]
		else:
			self.fancy_data = None
		if "description" in leafkeys:
			self.description = leaf["description"]
		else:
			self.description = None
		if "lo" in leafkeys:
			self.lo = leaf["lo"]
		else:
			self.lo = None
		if "hi" in leafkeys:
			self.hi = leaf["hi"]
		else:
			self.hi = None


class atui_branch:
	c_prefix:str
	c_type:str
	atomtree:str
	name:str
	description:dict
	leaves:list

	def copy(self):
		return copy.copy(self)

	def __init__(self, branch:dict):
		branchkeys = set(branch)

		if "c_prefix" in branchkeys:
			self.c_prefix = branch["c_prefix"]
		else:
			self.c_prefix = None
		if "c_type" in branchkeys:
			self.c_type = branch["c_type"]
		else:
			self.c_type = None
		if "atomtree" in branchkeys:
			self.atomtree = branch["atomtree"]
		else:
			self.atomtree = None
		if "name" in branchkeys:
			self.name = branch["name"]
		else:
			self.name = None
		if "description" in branchkeys:
			self.description = branch["description"]
		else:
			self.description = None

		if "leaves" in branchkeys:
			self.leaves = []
			for leaf in branch["leaves"]:
				self.leaves.append(atui_leaf(leaf))
		else:
			self.leaves = None


def populate_branch_defaults(defaults:dict):
	# defaults may not explicitly have every intended attribute, so make them
	# exist with NoneType
	default_leaf_types = set(("generic", "bitchild", "dynpattern"))
	leaves = {}
	if "leaf_defaults" in defaults:
		leaves = defaults["leaf_defaults"]
		for leaf in leaves:
			default_leaf_types.remove(leaf)
	else:
		defaults["leaf_defaults"] = leaves
	for name in default_leaf_types:
		leaves[name] = {}

	if not ("branch_defaults" in defaults):
		defaults["branch_defaults"] = {}

	classed_leaves = {}
	for leaf in leaves:
		classed_leaves[leaf] = atui_leaf(leaves[leaf])
	classed_defaults = {
		"branch_defaults": atui_branch(defaults["branch_defaults"]),
		"leaf_defaults": classed_leaves
	}
	return classed_defaults

def infer_leaf_data(defaults:dict, leaf_select:str, leaves:list):
	# infer missing data on a branch's leaves based on what already exists for
	# a leaf, and the global_defaults

	leaf_defaults = defaults["leaf_defaults"]
	leaf_default = leaf_defaults[leaf_select]

	for leaf in leaves:
		assert (not (leaf.name is None))

		if leaf.access is None:
			leaf.access = leaf_default.access
		if leaf.access_meta is None:
			leaf.access_meta = leaf_default.access_meta
		if leaf.display is None:
			leaf.display = leaf_default.display
		if leaf.fancy is None:
			leaf.fancy = leaf_default.fancy
		if leaf.fancy_data is None:
			leaf.fancy_data = leaf_default.fancy_data
		if leaf.description is None:
			leaf.description = leaf_default.description
		if leaf.lo is None:
			leaf.lo = leaf_default.lo
		if leaf.hi is None:
			leaf.hi = leaf_default.hi

		fancy_data = None
		old_default = None
		child_leaf = None
		access = ""
		access_meta = ""
		if leaf.fancy == "ATUI_BITFIELD":
			fancy_data = copy.copy(leaf.fancy_data)
			leaf.fancy_data = []
			for l in fancy_data:
				 leaf.fancy_data.append(atui_leaf(l))

			old_default = leaf_defaults["bitchild"]
			new_default = old_default.copy()
			leaf_defaults["bitchild"] = new_default
			#new_default.access = leaf.access # unnecessary
			new_default.access_meta = leaf.access_meta # c preprocessor stuff
			new_default.fancy = "_ATUI_BITCHILD"
			infer_leaf_data(defaults, "bitchild", leaf.fancy_data)

			leaf_defaults["bitchild"] = old_default
		elif leaf.fancy == "ATUI_DYNARRAY":
			fancy_data = copy.copy(leaf.fancy_data)
			pattern = []
			leaf.fancy_data["pattern"] = pattern
			for l in fancy_data["pattern"]:
				 pattern.append(atui_leaf(l))

			if not ("enum" in leaf.fancy_data):
				leaf.fancy_data["enum"] = "NULL"
			if leaf.access:
				access_meta = leaf.access_meta # direct array
			else:
				access_meta = fancy_data["deferred"] # array of pointers
			access_meta += "[0]" # c preprocessor stuff

			old_default = leaf_defaults["dynpattern"]
			new_default = old_default.copy()
			leaf_defaults["dynpattern"] = new_default
			new_default.access_meta = access_meta
			infer_leaf_data(defaults, "dynpattern", pattern)

			leaf_defaults["dynpattern"] = old_default

		if (leaf.fancy in
				("ATUI_DYNARRAY", "ATUI_STRING","ATUI_INLINE","ATUI_PETIOLE")
				):
			if leaf.display not in ("ATUI_NODISPLAY", "ATUI_NAN"):
				leaf.display = "ATUI_NAN"


def infer_branch_data(defaults:dict, branch:atui_branch, infer_leaves:bool=True):
	# infer missing data on both the branch elements and all of its leaves,
	# based on what already exists for that branch, and the global_defaults

	branch_defaults = defaults["branch_defaults"]

	if branch.c_prefix is None:
		branch.c_prefix = branch_defaults.c_prefix
	if branch.c_type is None:
		branch.c_type = branch_defaults.c_type
	if branch.atomtree is None:
		branch.atomtree = branch_defaults.atomtree
	if branch.description is None:
		branch.description = branch_defaults.description

	assert (not (branch.c_type is None))
	if branch.name is None:
		branch.name = branch.c_type

	if infer_leaves and branch.leaves:
		infer_leaf_data(defaults, "generic", branch.leaves)

def num_dynpattern_leaves(pattern:list):
	num_leaves = len(pattern)
	for leaf in pattern:
		if leaf.fancy == "ATUI_BITFIELD":
			num_leaves += len(leaf.fancy_data)
		elif leaf.fancy == "ATUI_DYNARRAY":
			num_leaves += num_dynpattern_leaves(leaf.fancy_data["pattern"])
	return num_leaves

def leaf_to_dynbounds(leaf:atui_leaf, indent:str):
	# ATUI_DYNARRAY boundaries
	child_indent = indent + "\t"
	bounds_template = (
"{\n"
+ child_indent + ".deferred_start_array = %s,\n"
+ child_indent + ".element_size = sizeof(%s[0]),\n"
+ child_indent + ".dynarray_length = %s,\n"
+ child_indent + ".numleaves = %u,\n"
+ child_indent + ".enum_taglist = _PPATUI_NULLPTR(ATUI_ENUM(%s)),\n"
+ child_indent + ".pattern = (const atui_leaf[]) {\n"
+ "%s"
+ child_indent + "},\n"
+ indent + "},\n"
)
	access = ""
	if leaf.access:
		access = leaf.access # direct array
	else:
		access = leaf.fancy_data["deferred"] + "[0]" # array of pointers
	return bounds_template % (
		str(not leaf.access).lower(),
		access,
		leaf.fancy_data["count"],
		len(leaf.fancy_data["pattern"]),
		leaf.fancy_data["enum"],
		leaves_to_text(leaf.fancy_data["pattern"], child_indent+"\t")
	)

def leaf_to_subleaf(leaf:atui_leaf, indent:str):
	# if a leaf has sub leaves. See also: struct subleaf_meta
	child_indent = indent + "\t"
	bounds_template = (
"{\n"
+ child_indent + ".element_size = %s,\n"
+ child_indent + ".dynarray_length = %s,\n"
+ child_indent + ".deferred_start_array = %s,\n"
+ child_indent + ".numleaves = %u,\n"
+ child_indent + ".enum_taglist = _PPATUI_NULLPTR(ATUI_ENUM(%s)),\n"
+ child_indent + ".sub_leaves = (const atui_leaf[]) {\n"
+ "%s"
+ child_indent + "},\n"
+ indent + "},"
)
	bounds_vals = ()
	if leaf.fancy == "ATUI_DYNARRAY":
		access_meta = ""
		if leaf.access_meta:
			access_meta = leaf.access_meta # direct array
		else:
			access_meta = leaf.fancy_data["deferred"]+"[0]" # array of pointers
		bounds_vals = (
			"sizeof(%s[0])" % access_meta,
			leaf.fancy_data["count"],
			str(not leaf.access_meta).lower(),
			len(leaf.fancy_data["pattern"]),
			leaf.fancy_data["enum"],
			leaves_to_text(leaf.fancy_data["pattern"], child_indent+"\t")
		)
	elif leaf.fancy == "ATUI_BITFIELD":
		bounds_vals = (
			"0", "0", "0",
			len(leaf.fancy_data),
			"ATUI_NULL",
			leaves_to_text(leaf.fancy_data, child_indent+"\t"),
		)

	return bounds_template % bounds_vals

def leaves_to_text(leaves:list, indent:str):
	# leaves to text meant for a segment of a c file
	child_indent = indent + "\t"
	leaf_template = (
indent + "{\n"
+ child_indent + ".name = u8\"%s\",\n"
+ child_indent + ".origname = u8\"%s\",\n"
+ child_indent + ".varname = u8\"%s\",\n"
+ child_indent + ".type = (\n"
+ child_indent + "\t%s | %s\n"
+ child_indent + "\t| _PPATUI_LEAF_SIGNED(%s)\n"
+ child_indent + "\t| _PPATUI_LEAF_FRACTION(%s)\n"
+ child_indent + "),\n"
+ child_indent + ".num_bytes = _PPATUI_NULLPTR_SIZE(%s),\n"
+ child_indent + ".array_size = 1,\n"
+ child_indent + ".fractional_bits = _PPATUI_LEAF_FIXED_FRACTION_BITS(%s),\n"
+ child_indent + ".total_bits = _PPATUI_LEAF_BITNESS(%s),\n"
+ child_indent + ".bitfield_hi = _PPATUI_LEAF_BITNESS(%s) - 1,\n"
+ child_indent + ".val = %s,\n"
+ "%s"
+ indent + "},\n"
)

	leaf_text_extra = "" # if there is any extra leaf elements
	var_meta = ""
	leaves_text = ""

	for leaf in leaves:
		if leaf.access:
			var_access = "&(%s)" % leaf.access
		else:
			var_access = "NULL"
		if leaf.access_meta: 
			var_meta = leaf.access_meta
		else:
			var_meta = "NULL"

		if leaf.fancy == "ATUI_NOFANCY":
			leaf_text_extra = ""
		elif leaf.fancy == "ATUI_ENUM":
			leaf_text_extra = (
				child_indent + ".enum_options = &(ATUI_ENUM(%s)),\n"
			)
			leaf_text_extra %= (leaf.fancy_data,)
		elif leaf.fancy == "ATUI_STRING":
			if leaf.access:
				var_access = leaf.access
			leaf_text_extra = ""
		elif leaf.fancy == "ATUI_ARRAY":
			if leaf.access:
				var_access = leaf.access
			var_meta = leaf.access_meta + "[0]"
			leaf_text_extra = (
				child_indent + ".array_size = (sizeof(%s)/sizeof(%s)),\n"
			)
			leaf_text_extra %= (leaf.access, var_meta)
		elif leaf.fancy == "ATUI_BITFIELD":
			leaf_text_extra = (
				child_indent + ".num_child_leaves = %u,\n"
				+ child_indent +
					".template_leaves = & (const struct subleaf_meta) %s\n"
			)
			leaf_text_extra %= (
				len(leaf.fancy_data),
				leaf_to_subleaf(leaf, child_indent),
			)
		elif leaf.fancy == "_ATUI_BITCHILD":
			leaf_text_extra = (
				child_indent + ".bitfield_hi = %u,\n"
				+ child_indent + ".bitfield_lo = %u,\n"
			)
			leaf_text_extra %= (leaf.hi, leaf.lo)
		elif leaf.fancy in ("ATUI_PETIOLE", "ATUI_INLINE"):
			leaf_text_extra = (
				child_indent + ".branch_bud = ATUI_FUNC(%s),\n"
			)
			leaf_text_extra %= (leaf.fancy_data,)
		elif leaf.fancy == "ATUI_DYNARRAY":
			if leaf.access:
				var_access = leaf.access
				var_meta = leaf.access_meta + "[0]"
			else:
				var_access = leaf.fancy_data["deferred"]
			if leaf.access_meta:
				var_meta = leaf.access_meta + "[0]"
			else:
				var_meta = leaf.fancy_data["deferred"] + "[0]"
			leaf_text_extra = (
				child_indent +
					".template_leaves = & (const struct subleaf_meta) %s\n"
			)
			leaf_text_extra %= (leaf_to_subleaf(leaf, child_indent),)
		else:
			assert 0, leaf.fancy

		leaf_text_extra += description_to_text(leaf.description, child_indent)

		leaf.name = leaf.name.replace("\"","\\\"")

		leaves_text += leaf_template % (
			leaf.name, leaf.name, var_access,
			leaf.display, leaf.fancy, var_meta, var_meta,
			var_meta, var_meta, var_meta, var_meta,  var_access,
			leaf_text_extra
		)
	return leaves_text
		

def deep_count_leaves(counters: list, leaves:list, counters_template:list):
	# go through all the leaves, recursively, to develop a string

	#counters_template = [0 for i in range(6)]
	#for i in range(1,6,2): counters_template[i] = "0"

	# 0: non-dynarray-pattern leaves
	# 1: dynarray leaves
	# 2: inline
	# 3: dynarray inline
	# 4: petiole
	# 5: dynarray petiole
	nest_dynarray = "+ (%s * (%u + %s))"
	sub_counters = []
	dynlength = ""
	counters[0] += len(leaves)
	for leaf in leaves:
		if leaf.fancy == "ATUI_INLINE":
			counters[2] += 1
		elif leaf.fancy == "ATUI_PETIOLE":
			counters[4] += 1
		#elif leaf.fancy == "ATUI_BITFIELD":
		#	counters[0] += len(leaf.fancy_data)
		elif leaf.fancy == "ATUI_DYNARRAY":
			sub_counters = counters_template.copy()
			# We're in dynarray. The dynarray segments of subcounters  will be
			# non-'0' if there is a nested dynarray.
			dynlength = leaf.fancy_data["count"]
			deep_count_leaves(
				sub_counters, leaf.fancy_data["pattern"],  counters_template
			)
			counters[1] += nest_dynarray % (dynlength, 
				sub_counters[0], sub_counters[1]
			)
			counters[3] += nest_dynarray % (dynlength, 
				sub_counters[2], sub_counters[3]
			)
			counters[5] += nest_dynarray % (dynlength, 
				sub_counters[4], sub_counters[5]
			)



def branches_to_c(atui_data:dict, fname:str):
	# atui branches to text meant for a c file
	assert(atui_data["class"] == "branch")
	assert(type(atui_data["branches"]) is list)

	branches = []
	branch = None
	defaults = populate_branch_defaults(atui_data["global_default"])
	for bd in atui_data["branches"]:
		branch = atui_branch(bd)
		infer_branch_data(defaults, branch, True)
		branches.append(branch)

	cfile_start = """\
/* autogenerated with ppatui.py. Do not edit */

#include "atomtree.h"
#include "atui.h"
"""
# These arrays need to be in a function to handle the bios-> and atomtree->
# everywhere. trying to globalise the vars gets annoying real fast.
	branch_template = """
PPATUI_HEADERIFY(%s) {
	const %s %s* const bios = args->suggestbios;
	const struct %s* const atomtree = args->atomtree;

	const atui_leaf leaves_init[] = {
%s\
	};
	const struct atui_branch_data branch_embryo = {
		.varname = u8"%s",
		.leaves_init = leaves_init,
		.num_leaves_init = sizeof(leaves_init)/sizeof(atui_leaf),
		.computed_num_leaves = %s,
		.computed_num_inline = %s,
		.computed_num_petiole = %s,
	};

	static_assert(sizeof(u8"%s") <= sizeof(((atui_branch*)0)->name));

	/* some things are kept in uint8_t */
	static_assert((sizeof(leaves_init)/sizeof(atui_leaf)) < 255);

	return atui_branch_allocator(&branch_embryo, args);
}
"""

	dynarray_patterns_text = ""
	dynarray_bounds_text = ""
	num_inline = 0
	num_petiole = 0

	# for deep count
	counters_template = [0 for i in range(6)]
	for i in range(1,6,2): counters_template[i] = "0" # 3 pairs of 0,""
	counters = []

	out_text = cfile_start
	for branch in branches:
		counters = counters_template.copy()
		deep_count_leaves(counters, branch.leaves, counters_template)

		out_text += branch_template % (
			branch.name, branch.c_prefix, branch.c_type, branch.atomtree,
			leaves_to_text(branch.leaves, "\t\t"),
			branch.name, # embryo
			"(%u + %s)" % (counters[0], counters[1]),
			"(%u + %s)" % (counters[2], counters[3]),
			"(%u + %s)" % (counters[4], counters[5]),
			branch.name, # assert
		)

	return out_text


def branches_to_h(atui_data:dict, fname:str):
	# c header text from atui branches
	assert(atui_data["class"] == "branch")
	assert(type(atui_data["branches"]) is list)

	header_header = """\
/* autogenerated with ppatui.py. Do not edit */

#ifndef %s_H
#define %s_H

"""
	header_ender = "\n#endif\n"
	header_entry = "PPATUI_HEADERIFY(%s);\n"

	out_text = header_header % (fname.upper(), fname.upper())
	branch = None
	defaults = populate_branch_defaults(atui_data["global_default"])
	for bd in atui_data["branches"]:
		branch = atui_branch(bd)
		infer_branch_data(defaults, branch, False)
		out_text += header_entry % branch.name

	return out_text + header_ender


def parse_args(argv:list):
	parser = argparse.ArgumentParser()
	parser.add_argument("-o", "--output", required=True, nargs=1)
	parser.add_argument("-i", "--inputs", required=True, nargs='*')
	modes = parser.add_mutually_exclusive_group(required=True)
	modes.add_argument("-s", "--source", action="store_true")
	modes.add_argument("-d", "--header", action="store_true")
	return parser.parse_args(argv)

def intend_source(atui_data:dict):
	assert("class" in atui_data)
	match (atui_data["class"]):
		case "branch": return branches_to_c
		case _: assert 0
def intend_header(atui_data:dict):
	assert("class" in atui_data)
	match (atui_data["class"]):
		case "branch": return branches_to_h
		case "enum": return enum_to_h
		case _: assert 0
def get_intent(intent:argparse.Namespace):
	if intent.source:
		return intend_source
	elif intent.header:
		return intend_header
	else:
		assert 0

def main(argc:int, argv:list):
	args = parse_args(argv[1:])

	# a function call that returns a function to select which final function to
	# use
	get_mode = get_intent(args)
	atui_data = {}
	output_text = ""
	for infile in args.inputs:
		with open(infile, 'r', encoding="utf-8") as f:
			atui_data = json5.load(f)
		mode_func = get_mode(atui_data)
		output_text += mode_func(atui_data, pathlib.Path(infile).stem)

	with open(args.output[0], 'w', encoding="utf-8") as f:
		f.write(output_text)

if (__name__ == "__main__"):
	sys.exit(main(len(sys.argv), sys.argv))
